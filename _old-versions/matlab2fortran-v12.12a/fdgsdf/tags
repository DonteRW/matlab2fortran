!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Let's see who is inout	matlab2fortran.m	/^%% Let's see who is inout$/;"	s
More tricky things that should require syntax parsing and recursion but that we'll not do!..	matlab2fortran.m	/^%% More tricky things that should require syntax parsing and recursion but that we'll not do!..$/;"	s
Output	matlab2fortran.m	/^%% Output$/;"	s
Parameters	matlab2fortran.m	/^%% Parameters$/;"	s
Part1 Q1	MAIN_part_1.m	/^%% Part1 Q1$/;"	s
Q4	MAIN_part_1.m	/^%% Q4$/;"	s
Q7	MAIN_part_1.m	/^%% Q7$/;"	s
Simple regexprep or rep	matlab2fortran.m	/^%% Simple regexprep or rep$/;"	s
Things that are easily recognizable by their first position on the line	matlab2fortran.m	/^%% Things that are easily recognizable by their first position on the line$/;"	s
dealing with multiple input files "recursively..."	matlab2fortran.m	/^%% dealing with multiple input files "recursively..."$/;"	s
fFormatDeclarations	matlab2fortran.m	/^function Declarations=fFormatDeclarations(Declarations,bSortDeclarationbyNames,bSortDeclarationbyTypes,bDebug)$/;"	f
fWriteDeclarationsAtCorrectLocation	matlab2fortran.m	/^function fWriteDeclarationsAtCorrectLocation(fidftmp,fidf,Declarations)$/;"	f
fassignement	matlab2fortran.m	/^function [ s , decl_stack ] = fassignement( s , decl_stack )$/;"	f
fconvertline	matlab2fortran.m	/^function [sf end_stack decl_stack unit_switch]=fconvertline(s,end_stack,decl_stack)$/;"	f
fconvertlinebyline	matlab2fortran.m	/^function [Declarations]=fconvertlinebyline(fidm,fidf,bDebug,bPipe)$/;"	f
ffindmatching	matlab2fortran.m	/^function [b po pc]=ffindmatching(s,pstart,co,cc,bforward);$/;"	f
fgetDeclaration	matlab2fortran.m	/^function [ sf ] = fgetDeclaration( v )$/;"	f
fgetVarTypeFromName	matlab2fortran.m	/^function [ vartype, varshape,varprop ] = fgetVarTypeFromName( varname )$/;"	f
fissurroundedby	matlab2fortran.m	/^function [ b, p1,p2 ] = fissurroundedby( s,p,c1,c2 )$/;"	f
fremovesinglespace	matlab2fortran.m	/^function [ s ] = fremovesinglespace( s )$/;"	f
fremovespaces	matlab2fortran.m	/^function [ s ] = fremovespaces( s )$/;"	f
freplaceend	matlab2fortran.m	/^function [ sf, end_stack ] = freplaceend( s,end_stack )$/;"	f
freplacefor	matlab2fortran.m	/^function [ sf, end_stack ] = freplacefor( s,end_stack )$/;"	f
freplacefunction	matlab2fortran.m	/^function [ sf, end_stack ] = freplacefunction( s,end_stack )$/;"	f
freplacefunctioncall	matlab2fortran.m	/^function [ sf ] = freplacefunctioncall( s )$/;"	f
freplaceif	matlab2fortran.m	/^function [ sf, end_stack ] = freplaceif( s,end_stack )$/;"	f
freplaceprintf	matlab2fortran.m	/^function [ sf ] = freplaceprintf( s )$/;"	f
freplacewhile	matlab2fortran.m	/^function [ sf, end_stack ] = freplacewhile( s,end_stack )$/;"	f
freplacezeros	matlab2fortran.m	/^function [ sf,decl_stack] = freplacezeros( s, decl_stack)$/;"	f
fsplitmatlablines	matlab2fortran.m	/^function [ sout ] = fsplitmatlablines( s,sout )$/;"	f
fstack_pop	matlab2fortran.m	/^function [ stack ,element ] = fstack_pop( stack )$/;"	f
fstack_pop_element	matlab2fortran.m	/^function [ stack , element] = fstack_pop_element( stack, n )$/;"	f
fstack_push	matlab2fortran.m	/^function [ stack ] = fstack_push( stack, addme )$/;"	f
fwrite_Declarations	matlab2fortran.m	/^function []=fwrite_Declarations(fidout,Decl)$/;"	f
matlab2fortran	matlab2fortran.m	/^function [  ] = matlab2fortran( varargin )$/;"	f
part 1	MAIN_part_1.m	/^%% part 1$/;"	s
stupid whiles	matlab2fortran.m	/^%% stupid whiles$/;"	s
